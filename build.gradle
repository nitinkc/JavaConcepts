plugins {
    id 'java'
    id 'maven-publish'
    id "org.sonarqube" version "4.4.1.3373" //For local testing
}

group = 'JavaConcepts'
version = '1.0-SNAPSHOT'

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += [
            '--add-exports=java.base/jdk.internal.vm=ALL-UNNAMED',
            '--enable-preview'
    ]
}
tasks.withType(JavaExec).configureEach {
    jvmArgs += [
            '--add-exports=java.base/jdk.internal.vm=ALL-UNNAMED',
            '--enable-preview']
    logging.captureStandardOutput LogLevel.QUIET
    logging.captureStandardError LogLevel.QUIET
}

tasks.withType(Test).configureEach {
    jvmArgs += "--enable-preview"
}

repositories {
    gradlePluginPortal()
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2')
        allowInsecureProtocol = true
    }
    flatDir { dirs '../Utilities/build/libs' }
    mavenCentral()
}

dependencies {
    //implementation name: 'Utilities-1.0-SNAPSHOT'
    implementation 'junit:junit:' + junitVersion
    implementation group: 'javax.persistence', name: 'javax.persistence-api', version: javaxPersistenceApiVersion
    implementation 'mysql:mysql-connector-java:' + mysqlConnectorVersion
    implementation 'org.springframework:spring-web:' + springWebVersion
    implementation 'joda-time:joda-time:' + jodaTimeVersion
    implementation 'org.reflections:reflections:' + reflectionsVersion
    //Lombok
    compileOnly libs.lombok
    annotationProcessor libs.lombok
    testCompileOnly libs.lombok
    testAnnotationProcessor libs.lombok
    //Apache Commons
    implementation libs.commons.collections4
    implementation libs.commons.lang3
    implementation libs.commons.io
    implementation libs.commons.math3
    //Jackson Mapper
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jacksonVersion
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: jacksonVersion
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.datatype/jackson-datatype-jsr310
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: jacksonVersion

    //JSON Parser
    implementation group: 'org.json', name: 'json', version: '20231013'
    implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
    implementation group: 'com.google.code.gson', name: 'gson', version: gsonVersion
    implementation 'com.google.guava:guava:' + guavaVersion
    // Reactive
    implementation 'io.reactivex.rxjava3:rxjava:' + rxJavaVersion
    implementation 'io.projectreactor:reactor-core:' + reactorCoreVersion
    implementation 'com.github.javafaker:javafaker:' + javaFakerVersion
    //Map Struct
    implementation 'org.mapstruct:mapstruct:' + mapstructVersion
    annotationProcessor 'org.mapstruct:mapstruct-processor:' + mapstructVersion
    //SL4J
    testImplementation 'org.slf4j:slf4j-nop:' + slf4jVersion
    testImplementation 'io.projectreactor:reactor-test:' + reactorTestVersion
    //Testing Framework
    testImplementation 'org.junit.jupiter:junit-jupiter-api:' + junitJupiterVersion
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:' + junitJupiterVersion
    testImplementation group: 'org.mockito', name: 'mockito-core', version: mockitoCoreVersion
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: mockitoCoreVersion
}

sonarqube {
    properties {
//        property 'sonar.host.url', 'https://sonarqube.host.com'
//        property "sonar.login", ""
//        property "sonar.password", ""
//        property "sonar.projectKey", "project:service:_"
//        property 'sonar.projectName', 'NameOf Service'
        property 'sonar.gradle.skipCompile','true'
        property 'sonar.java.source', 21
        property 'sonar.junit.reportPaths', 'build/results'
        property 'encoding', 'UTF-8'
        property 'charSet', 'UTF-8'
        property "sonar.coverage.jacoco.xmlReportPaths", "path.xml"
    }
}

task myJavadocs(type: Javadoc) {
    source = sourceSets.main.allJava
    //destinationDir = reporting.file("rest-api-docs")
}

test {
    useJUnitPlatform()
}

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}